<?phpnamespace app\index\controller;use app\common\controller\IndexBase;class User extends IndexBase{    protected $noLogin = ['login', 'reg','findpass'];    protected $noAuth = ['uploadImage', 'uploadFile', 'uploadVideo','findpass'];    protected function _initialize()    {        parent::_initialize();        !$this->checkLogin() && $this->redirect(url('index/user/login'));    }    function index(){        return $this->fetch('index');    }    /**     * 我购买的课程     */    function mycourse(){        $myCourse=model('userCourse')->order('addtime desc')->where(['uid'=>is_user_login()])->where(['type'=>array('in','1,2')])->select();        foreach ($myCourse as $key => $value) {            $myCourse[$key]['courseInfo']=$this->getCouseInfo($myCourse[$key]['cid'],$myCourse[$key]['type']);            $myCourse[$key]['progress']=round(100*getStuduedNum($myCourse[$key]['cid'],$myCourse[$key]['type'])/getCourseNum($myCourse[$key]['cid'],$myCourse[$key]['type']));            $myCourse[$key]['lastStudy']=getLastStudy($myCourse[$key]['cid'],$myCourse[$key]['type']);            $myCourse[$key]['remain'] =$myCourse[$key]['courseInfo']['youxiaoqi']==0?'永久有效': getLastTime(strtotime("+".$myCourse[$key]['courseInfo']['youxiaoqi']."days",strtotime( $myCourse[$key]['addtime'])));        }        return $this->fetch('mycourse',['myCourse'=>$myCourse]);    }    /**     * 我的班级     */    function myclassroom(){        $myCourse=model('userCourse')->order('addtime desc')->where(['uid'=>is_user_login(),'type'=>3])->select();        foreach ($myCourse as $key => $value) {            $myCourse[$key]['courseInfo']=model('classroom')->where(['id'=>$myCourse[$key]['cid']])->find();            $myCourse[$key]['remain'] =$myCourse[$key]['courseInfo']['youxiaoqi']==0?'永久有效': getLastTime(strtotime("+".$myCourse[$key]['courseInfo']['youxiaoqi']."days",strtotime( $myCourse[$key]['addtime'])));            $myCourse[$key]['progress'] = getAllProgress($myCourse[$key]['cid'], is_user_login());            $myCourse[$key]['isDaoQi']=(strtotime("+".$myCourse[$key]['courseInfo']['youxiaoqi']."days",strtotime($myCourse[$key]['addtime']))<= time() && $myCourse[$key]['courseInfo']['youxiaoqi']>0)?true:false;        }        return $this->fetch('myclassroom',['myclassroom'=>$myCourse]);    }    /**     * 我的学习记录     */    function mylearn(){        $param = $this->request->param();        $param['id']=hashids_decode($param['id']);        $param['type']=hashids_decode($param['type']);        $addCourseTime=model('userCourse')->where(['cid'=>$param['id'],'type'=>$param['type'],'uid'=>is_user_login()])->value('addtime');        switch ($param['type'])        {            case 1:                model('videoCourse')->where(['id'=>$param['id']])->setInc('views');                $courseinfo = model('videoCourse')->where(['id'=>$param['id']])->find();                $section=model('videoCourse')->getSection($param['id']);                $comment=model('comment')->where(['cid'=>$courseinfo['id'],'cstype'=>1])->order('addtime desc')->select();                $material=model('material')->where('id', 'in', json_to_array($courseinfo['material_id']))->order('addtime desc')->select();                $studiedNum=getStuduedNum($param['id'],$param['type']);                $allNum=getCourseNum($param['id'],$param['type']);                $lastStudy=getLastStudy($param['id'],$param['type']);                $remain=$courseinfo['youxiaoqi']==0?'永久有效': getLastTime(strtotime("+".$courseinfo['youxiaoqi']."days",strtotime($addCourseTime)));                $isDaoQi=(strtotime("+".$courseinfo['youxiaoqi']."days",strtotime($addCourseTime))<= time() &&  $courseinfo['youxiaoqi']>0)?true:false;                $progress=round(100*$studiedNum/$allNum);                $teacherInfo=model('cooperate')->where('id',$courseinfo['teacher_id'])->find();                $courseUser=model('userCourse')->where(['cid'=>$param['id'],'type'=>1])->limit(18)->select();                return $this->fetch('mylearn',['courseUser'=>$courseUser,'teacherInfo'=>$teacherInfo,'info'=>$courseinfo,'secList'=>$section,'studiedNum'=>$studiedNum,'allNum'=>$allNum,'lastStudy'=>$lastStudy,'progress'=>$progress,'comment'=>$comment,'material'=>$material,'remain'=>$remain,'isDaoQi'=>$isDaoQi]);                break;            case 2:                model('liveCourse')->where(['id'=>$param['id']])->setInc('views');                $courseinfo = model('liveCourse')->where(['id'=>$param['id']])->find();                $section=model('liveCourse')->getSection($param['id']);                $comment=model('comment')->where(['id'=>$courseinfo['id'],'cstype'=>2])->order('addtime desc')->select();                $material=model('material')->where('id', 'in', json_to_array($courseinfo['material_id']))->order('addtime desc')->select();                $studiedNum=getStuduedNum($param['id'],$param['type']);                $allNum=getCourseNum($param['id'],$param['type']);                $courseUser=model('userCourse')->where(['cid'=>$param['id'],'type'=>2])->limit(18)->select();                $remain=$courseinfo['youxiaoqi']==0?'永久有效': getLastTime(strtotime("+".$courseinfo['youxiaoqi']."days",strtotime($addCourseTime)));                $isDaoQi=(strtotime("+".$courseinfo['youxiaoqi']."days",strtotime($addCourseTime))<= time() &&  $courseinfo['youxiaoqi']>0)?true:false;                $teacherInfo=model('cooperate')->where('id',$courseinfo['teacher_id'])->find();                $recentlyLive=model('liveSection')->where('csid',$param['id'])->where('starttime','gt',date('Y-m-d H:i:s', time()))->order('starttime asc')->limit(1)->select();                return $this->fetch('mylearn',['recentlyLive'=>$recentlyLive,'courseUser'=>$courseUser,'teacherInfo'=>$teacherInfo,'info'=>$courseinfo,'secList'=>$section,'studiedNum'=>$studiedNum,'allNum'=>$allNum,'comment'=>$comment,'material'=>$material,'remain'=>$remain,'isDaoQi'=>$isDaoQi]);                break;        }    }    /**     * 我的收藏     */    function myfavourite(){        $myFavourite=db('favourite')->where(['uid'=>is_user_login()])->select();        foreach ($myFavourite as $key => $value) {            $myFavourite[$key]['courseInfo']=$this->getCouseInfo($myFavourite[$key]['cid'],$myFavourite[$key]['type']);        }        return $this->fetch('myfavourite',['myFavourite'=>$myFavourite]);    }    /**     * 我的考试记录     */    function myexam(){        return $this->fetch('myexam');    }    /**     * 我的订单     */    function myorder(){        $list=model('order')->order('id desc')->where(['uid'=>is_user_login()])->paginate(config('page_number'));        return $this->fetch('myorder',['list'=>$list]);    }    /**     * 我的优惠券     */    function mycoupon(){        $list=model('coupon')->order('id desc')->where(['userId'=>is_user_login()])->paginate(config('page_number'));        return $this->fetch('mycoupon',['list'=>$list]);    }    /**     * 删除我的订单     */    function  orderDel(){        if ($this->request->isPost()) {            if ($this->delete('order', $this->request->param()) === true) {                $this->success('删除成功');            } else {                $this->error($this->errorMsg);            }        }    }    /**     * 个人信息     */    function myinfo(){        if ($this->request->isPost()) {            $param = $this->request->param();            if ($this->update('user', $param, input('_verify', false)) === true) {                $this->success('修改成功', url('index/user/myinfo'));            } else {                $this->error($this->errorMsg);            }        }        return $this->fetch('myinfo');    }    /**     * 我的错题     */    function myerrors(){        return $this->fetch('myerrors');    }    /**     * 课程点卡     */    function card(){        if ($this->request->isPost()) {            $param = $this->request->param();            $cardInfo= model('card')->where(['number'=>$param['number']])->find();            $userInfo= model('user')->where(['id'=>is_user_login()])->find();            !$cardInfo &&  $this->error('此卡号错误，请核实重新输入！');            $cardInfo['usestatus']==1 && $this->error('此卡号已被使用，请核实重新输入！');            $cardInfo['status']==1 && $this->error('此卡号已被禁用，请核实重新输入！');            $yue=$cardInfo['money']+$userInfo['yue'];            if ($this->update('user', ['id'=>is_user_login(),'yue'=>$yue], input('_verify', false)) === true) {                $this->update('card', ['number'=>$param['number'],'usestatus'=>1,'buystatus'=>1,'uid'=>is_user_login()], input('_verify', false),$field = true,$key='number');                $this->success('充值成功', url('index/user/index'));            } else {                $this->error($this->errorMsg);            }        }        return $this->fetch('card');    }    /**     * 用户登录     */    function login(){        is_user_login() && $this->redirect(url('index/user/index'));        if ($this->request->isPost()) {            $param = $this->request->param();            $result = $this->validate($param, 'login');            if ($result !== true) {                $this->error($result);            }            if(check_mobile($param['username'])){                $where['mobile']=$param['username'];                $where['password']=md5($param['password']);            }else{                $where['username']=$param['username'];                $where['password']=md5($param['password']);            }            $user = model('user')->where($where)->find();            if ($user) {                $user['status'] != 1 && $this->error('账号已禁用');                $auth = [                    'user_id' => $user['id'],                    'username' => $user['username'],                ];                session('user_auth', $auth);                session('user_auth_sign', data_auth_sign($auth));                model('user')->save([                    'last_login_time' => time(),                    'last_login_ip'   => $this->request->ip(),                    'login_count'     => $user['login_count'] + 1,                ], ['id' => $user['id']]);                if($user['is_teacher']==1){                    $adminauth = [                        'admin_id' => $user['admin_id'],                        'username' => $user['username'],                    ];                    session('admin_auth', $adminauth);                    session('admin_auth_sign', data_auth_sign($adminauth));                }                if($returnUrl = session('returnUrl')) {                    $this->success('登录成功', $returnUrl);                }else{                    $this->success('登录成功', url('index/user/index'));                }            } else {                $this->error('账号或密码错误');            }        }        return $this->fetch('login');    }    /**     * 用户退出     */    function logout(){        session('user_auth', null);        session('user_auth_sign', null);        session('admin_auth', null);        session('admin_auth_sign', null);        if($returnUrl = session('returnUrl')) {            $this->redirect($returnUrl);        }else{            $this->redirect(url('index/user/login'));        }    }    /**     * 用户注册     */    function reg(){        $MC= model('system')->where('name', 'SmsTemplates_MC')->find();        $data =unserialize($MC['value']);        if ($this->request->isPost()) {            $param = $this->request->param();            if(model('user')->where(['mobile' => $param['mobile']])->find()){                $this->error('手机号已被注册');exit();            }            if($data['status']==1){                if(session('telphoneCode')!=$param['codeverify']){                    $this->error('手机验证码错误');exit();                }                if(session('telphone')!=$param['mobile']){                    $this->error('手机号码输入有误');exit();                }            }            if(model('user')->where(['username' => $param['username']])->find()){                $this->error('用户名已被注册');            }            if($this->insert('user',$param) === true){                $user= model('user')->where(['username' => $param['username']])->find();                $auth = [                    'user_id' => $user['id'],                    'username' => $user['username'],                ];                $this->coupon('reg',$user['id']);                session('user_auth', $auth);                session('user_auth_sign', data_auth_sign($auth));                session('telphoneCode', null);                session('telphone', null);                $this->success('注册成功', url('index/user/index'));            }else{                $this->error($this->errorMsg);            }        }        return $this->fetch('reg',['data'=>$data]);    }    /**     * 教师入驻     */    function cooperate(){        if ($this->request->isPost()) {            $param = $this->request->param();            if($this->insert('cooperate',$param) === true){                $this->success('申请成功,敬请期待审核!', url('index/user/index'));            }        }else{            for ($x = 0; $x <= 30; $x++) {                $y_array[$x] = date("Y", strtotime("-15 year")) - $x . '年';            }            for ($x = 1; $x <= 12; $x++) {                $m_array[$x] = $x . '月';            }            for ($x = 1; $x <= 31; $x++) {                $d_array[$x] = $x . '日';            }            $ordinance=model('other')->where(['type'=>'ordinance'])->find();            return $this->fetch('cooperate', ['y' => $y_array, 'm' => $m_array, 'd' => $d_array,'uid'=>is_user_login(),'ordinance'=>$ordinance]);        }    }    /**     * 上传头像     */    function upavatar(){        try {            $file = $this->request->file('file');            $info = $file->move(ROOT_PATH . 'public' . DS . 'upload' . DS . 'image');            if ($info) {                $upload_image = unserialize(config('upload_image'));                if ($upload_image['is_thumb'] == 1 || $upload_image['is_water'] == 1 || $upload_image['is_text'] == 1) {                    $object_image = \think\Image::open($info->getPathName());                    // 图片压缩                    if ($upload_image['is_thumb'] == 1) {                        $object_image->thumb($upload_image['max_width'], $upload_image['max_height']);                    }                    // 图片水印                    if ($upload_image['is_water'] == 1) {                        $object_image->water(ROOT_PATH . str_replace('/', '\\', trim($upload_image['water_source'], '/')), $upload_image['water_locate'], $upload_image['water_alpha']);                    }                    // 文本水印                    if ($upload_image['is_text'] == 1) {                        $font = !empty($upload_image['text_font']) ? str_replace('/', '\\', trim($upload_image['text_font'], '/')) : 'vendor\topthink\think-captcha\assets\zhttfs\1.ttf';                        $object_image->text($upload_image['text'], ROOT_PATH . $font, $upload_image['text_size'], $upload_image['text_color'], $upload_image['text_locate'], $upload_image['text_offset'], $upload_image['text_angle']);                    }                    $object_image->save($info->getPathName());                }                return ['code' => 1, 'url' => '/upload/image/' . str_replace('\\', '/', $info->getSaveName())];            } else {                return ['code' => 0, 'msg' => $file->getError()];            }        } catch (\Exception $e) {            return ['code' => 0, 'msg' => $e->getMessage()];        }    }    /**     * 绑定手机号     */    function binding(){        if ($this->request->isPost()) {            $param = $this->request->param();            if(session('telphoneCode')!=$param['codeverify']){                $this->error('手机验证码错误');exit();            }            if(session('telphone')!=$param['mobile']){                $this->error('手机号码输入有误');exit();            }            $data['mobile']=$param['mobile'];            $data['id']=is_user_login();            if ($this->update('user', $data, input('_verify', false)) === true) {                $this->success('绑定成功', url('index/user/myinfo'));                session('telphoneCode', null);                session('telphone', null);            } else {                $this->error($this->errorMsg);            }        }        return $this->fetch('binding');    }    /**     * 手机号找回密码     */    function findpass(){        if ($this->request->isPost()) {            $param = $this->request->param();            if(!model('user')->where(['mobile' => $param['mobile']])->find()){                $this->error('该手机号还未注册');exit();            }            if(session('telphoneCode')!=$param['codeverify']){                $this->error('手机验证码错误');exit();            }            if(session('telphone')!=$param['mobile']){                $this->error('手机号码输入有误');exit();            }            if (model('user')->where(['mobile'=>$param['mobile']])->update(['password'=>md5($param['password'])])) {                session('telphoneCode', null);                session('telphone', null);                $this->success('密码重置成功', url('index/user/login'));            } else {                $this->error($this->errorMsg);            }        }        return $this->fetch('findpass');    }    /**     * 密码修改     */    function repass(){        if ($this->request->isPost()) {            $param = $this->request->param();            $userInfo= model('user')->where(['id'=>is_user_login()])->find();            if(!empty($userInfo['password'])){               md5($param['oldpass'])!=$userInfo['password'] && $this->error('原始密码输入有误！');            }            $param['password']!=$param['repassword'] && $this->error('重复密码有误');            if ($this->update('user', ['id'=>is_user_login(),'password'=>$param['password']], input('_verify', false)) === true) {                session('user_auth', null);                session('user_auth_sign', null);                $this->success('修改密码成功', url('index/user/login'));            } else {                $this->error($this->errorMsg);            }        }        return $this->fetch('repass');    }}