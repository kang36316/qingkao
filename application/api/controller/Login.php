<?phpnamespace app\api\controller;use think\Cache;use think\Db;use think\Request;use think\Validate;use Overtrue\EasySms\EasySms;class Login{    const QQ = "qq";    const WEIXIN = "weixin";    const WEIBO = "weibo";    public $verify_code_prefix = 'verify_code/';    static function getApp($login = self::QQ, array $config = array())    {        if (strtolower($login) == self::QQ) {            $app = QQ::init($config);        }        else if (strtolower($login) == self::WEIXIN) {            $app = WeiXin::init($config);        }        else if (strtolower($login) == self::WEIBO) {            $app = WeiBo::init($config);        }        else {            return false;        }        return $app;    }    //给登录发送短信    public function sendVerifyCode(Request $request)    {        $params = $request->param();        $validator = new Validate([            'phone|手机' => 'require|length:11'        ]);        if(!$validator->check($params)){            $error = $validator->getError();            return json_encode(['status' => false, 'message' => $error]);        }        $member = Db::table('yf_member_list')            ->where('member_list_tel', '=', $params['phone'])            ->find();        if(!$member){            return json_encode(['status' => false, 'message' => '用户不存在']);        }        if(!$this->sendSms($params['phone'])){            return json_encode(['status' => false, 'message' => '网络错误，请稍后重试']);        }        return json_encode(['status' => true, 'message' => '发送成功']);    }    //执行发送短信的操作    public function sendSms($phone)    {        $config = [            // HTTP 请求的超时时间（秒）            'timeout' => 5.0,            // 默认发送配置            'default' => [                // 网关调用策略，默认：顺序调用                'strategy' => \Overtrue\EasySms\Strategies\OrderStrategy::class,                // 默认可用的发送网关                'gateways' => [                    'yunpian', 'aliyun',                ],            ],            // 可用的网关配置            'gateways' => [                'errorlog' => [                    'file' => '/tmp/easy-sms.log',                ],                'aliyun' => [                    'access_key_id' => '',                    'access_key_secret' => '',                    'sign_name' => '',                ]            ],        ];        $easySms = new EasySms($config);        try{            $easySms->send($phone, [                'content'  => '验证码${code}，您正在进行身份验证，打死不要告诉别人哦！',                'template' => 'SMS_174880648',                'data' => [                    'code' => $this->generateVerifyCode($phone)                ],            ]);        }catch(\Overtrue\EasySms\Exceptions\NoGatewayAvailableException $exception){            return false;        }        return true;    }    //生成验证码并放入缓存    public function generateVerifyCode($phone)    {        $code = rand(1000,9999);        Cache::set($this->verify_code_prefix.$phone, $code, 60*5);        return $code;    }    //使用验证码登录    public function verifyCodeLogin(Request $request)    {        $params = $request->param();        $validator = new Validate([            'phone|手机' => 'require|length:11',            'verify_code|验证码' => 'require|length:4',        ]);        if(!$validator->check($params)){            $error = $validator->getError();            return json_encode(['status' => false, 'message' => $error[0]]);        }        $member = Db::table('yf_member_list')            ->where('member_list_tel', '=', $params['phone'])            ->find();        if(!$member){            return json_encode(['status' => false, 'message' => '用户不存在']);        }        $code = Cache::get($this->verify_code_prefix.$params['phone']);        if($code != $params['verify_code']){            return json_encode(['status' => false, 'message' => '验证码不正确']);        }        //成功后返回用户的相关信息        return json_encode(['status' => true, 'message' => '请求成功', 'data' => $member]);    }    //用户名密码登录    public function passwordLogin(Request $request)    {        $params = $request->param();        $validator = new Validate([            'phone|手机' => 'require|length:11',            'password|密码' => 'require|max:50',        ]);        if(!$validator->check($params)){            $error = $validator->getError();            return json_encode(['status' => false, 'message' => $error[0]]);        }        $member = Db::table('yf_member_list')            ->where('member_list_tel', '=', $params['phone'])            ->find();        if(!$member){            return json_encode(['status' => false, 'message' => '用户不存在']);        }        //不支持密码        if(!$member->member_list_pwd){            return json_encode(['status' => false, 'message' => '请使用验证码登录']);        }        if($member->member_list_pwd != md5($params['password'])){            return json_encode(['status' => false, 'message' => '密码不正确']);        }        return json_encode(['status' => true, 'message' => '成功', 'data' => $member]);    }}