<?phpnamespace app\api\controller;use app\common\controller\IndexBase;use app\common\extend\alipay\Alipay;use app\common\extend\wechat\WechatPay;class App  extends IndexBase{    function version(){        $info=$this->get_site_info();        $url = $info['server'] . "/educloud/Mobileterminal/getAppStatus";        $postdata = ['domain'=>$info['domain'],'type'=>'Android'];        return (post_curl($url, $postdata));    }    function siteInfo(){        $info['site_name']=config('website.site_name');        return  json_encode($info);    }    function loadBanner(){        $webUrl=$this->request->param("webUrl");        $slide = model('ad')->order('sort_order desc')->where(['category'=>'index','status'=>1])->select();        foreach ($slide as $k=> $value) {            $slide[$k]['image']=$webUrl.$slide[$k]['image'];        }        return  json_encode($slide);    }    function loadCourse(){        $webUrl=$this->request->param("webUrl");        $videoCourse=model('videoCourse')->field(['id','title','price','picture','type'])->order('sort_order asc,addtime desc')->limit(8)->where(['status'=>1])->select();        foreach ($videoCourse as $k=> $value) {            $videoCourse[$k]['picture']=$webUrl.$videoCourse[$k]['picture'];            $videoCourse[$k]['stuNum']=getUserNum($videoCourse[$k]['id'],1);        }        $liveCourse=model('liveCourse')->field(['id','title','price','picture','type'])->order('sort_order asc,addtime desc')->limit(8)->where(['status'=>1])->select();        foreach ($liveCourse as $k=> $value) {            $liveCourse[$k]['picture']=$webUrl.$liveCourse[$k]['picture'];            $liveCourse[$k]['stuNum']=getUserNum($liveCourse[$k]['id'],2);;        }        $allCourse=array_merge($videoCourse,$liveCourse);        return  json($allCourse);    }    function search(){        $param=$this->request->param();        $key='%'.$param['key'].'%';        $videoCourse=model('videoCourse')->field(['id','title','price','picture','type','teacher_id'])->where('title','like',$key)->where(['status'=>1])->select();        foreach ($videoCourse as $k=> $value) {            $videoCourse[$k]['picture']=$param['webUrl'].$videoCourse[$k]['picture'];            $videoCourse[$k]['stuNum']=getUserNum($videoCourse[$k]['id'],1);            $videoCourse[$k]['teacher'] =getTeacherName($videoCourse[$k]['teacher_id']);        }        $liveCourse=model('liveCourse')->field(['id','title','price','picture','type','teacher_id'])->where('title','like',$key)->where(['status'=>1])->select();        foreach ($liveCourse as $k=> $value) {            $liveCourse[$k]['picture']=$param['webUrl'].$liveCourse[$k]['picture'];            $liveCourse[$k]['stuNum']=getUserNum($liveCourse[$k]['id'],2);            $liveCourse[$k]['teacher'] =getTeacherName($liveCourse[$k]['teacher_id']);        }        $allCourse=array_merge($videoCourse,$liveCourse);        return  json($allCourse);    }    function courseDetail(){        $param=$this->request->param();        //$param['type']=2;$param['id']=2;        switch ($param['type'])        {            case 1:                model('videoCourse')->where(['id'=>$param['id']])->setInc('views');                $courseinfo = model('videoCourse')->where(['id'=>$param['id']])->find();                $courseinfo['picture']=$param['webUrl'].$courseinfo['picture'];                $courseinfo['keshi']=getCourseNum($courseinfo['id'],1);                $courseinfo['userNum']=getUserNum($courseinfo['id'],1);                $courseinfo['youxiaoqi']=youxiaoqi2($courseinfo['youxiaoqi']);                $section=model('videoCourse')->getSection($param['id']);                $comment=model('comment')->where(['cid'=>$courseinfo['id'],'cstype'=>1])->order('addtime desc')->select();                foreach ($comment as $k=> $value) {                    $comment[$k]['userInfo']=model('user')->where(['id'=>$comment[$k]['uid']])->field(['id','username'])->find();                    $comment[$k]['userInfo']['avatar']=$param['webUrl'].defaultAvatar(getAvatar($comment[$k]['uid']));                }                $material=model('material')->where('id', 'in', json_to_array($courseinfo['material_id']))->order('addtime desc')->select();                $teacherInfo=model('cooperate')->where('id',$courseinfo['teacher_id'])->find();                $teacherInfo['avatar']=$param['webUrl'].defaultAvatar(getAvatar($teacherInfo['uid']));                $isBuy=$this->checkBuied($param['uid'],$courseinfo['id'],$param['type']);                if(!empty($section[0]['section'])){                    $courseinfo['isZhang']=1;                    foreach($section as $k=> $value){                        foreach($section[$k]['section'] as $i=> $value){                            $section[$k]['section'][$i]['isStudy']=isStudyBySidApp($courseinfo['id'],$section[$k]['section'][$i]['id'],1,$param['uid']);                        }                    }                }                else{                    $courseinfo['isZhang']=0;                    foreach($section as $k=> $value){                        $section[$k]['isStudy']=isStudyBySidApp($courseinfo['id'],$section[$k]['id'],1,$param['uid']);                    }                }                return (json_encode(['info'=>$courseinfo,'secList'=>$section,'comment'=>$comment,                    'material'=>$material,'teacherInfo'=>$teacherInfo,'isBuy'=>$isBuy])) ;                break;            case 2:                model('liveCourse')->where(['id'=>$param['id']])->setInc('views');                $courseinfo = model('liveCourse')->where(['id'=>$param['id']])->find();                $courseinfo['picture']=$param['webUrl'].$courseinfo['picture'];                $courseinfo['keshi']=getCourseNum($courseinfo['id'],2);                $courseinfo['userNum']=getUserNum($courseinfo['id'],2);                $courseinfo['youxiaoqi']=youxiaoqi2($courseinfo['youxiaoqi']);                $section=model('liveCourse')->getSection($param['id']);                $comment=model('comment')->where(['id'=>$courseinfo['id'],'cstype'=>2])->order('addtime desc')->select();                foreach ($comment as $k=> $value) {                    $comment[$k]['userInfo']=model('user')->where(['id'=>$comment[$k]['uid']])->field(['id','username'])->find();                    $comment[$k]['userInfo']['avatar']=$param['webUrl'].defaultAvatar(getAvatar($comment[$k]['uid']));                }                $material=model('material')->where('id', 'in', json_to_array($courseinfo['material_id']))->order('addtime desc')->select();                $teacherInfo=model('cooperate')->where('id',$courseinfo['teacher_id'])->find();                $teacherInfo['avatar']=$param['webUrl'].defaultAvatar(getAvatar($teacherInfo['uid']));                $isBuy=$this->checkBuied($param['uid'],$courseinfo['id'],$param['type']);                if(!empty($section[0]['section'])){                    $courseinfo['isZhang']=1;                    foreach($section as $k=> $value){                        foreach($section[$k]['section'] as $i=> $value){                            $section[$k]['section'][$i]['isStudy']=isStudyBySidApp($courseinfo['id'],$section[$k]['section'][$i]['id'],2,$param['uid']);                            if(strtotime($section[$k]['section'][$i]['starttime'])<time()                                and time()<strtotime("+".$section[$k]['section'][$i]['duration']."minutes",strtotime($section[$k]['section'][$i]['starttime']))){                                $section[$k]['section'][$i]['liveStatus']="正在直播...";                            }                            if(time()>strtotime("+".$section[$k]['section'][$i]['duration']."minutes",strtotime($section[$k]['section'][$i]['starttime']))){                                $section[$k]['section'][$i]['liveStatus']="已结束,看回放！";                            }                            if(strtotime($section[$k]['section'][$i]['starttime'])>time()){                                $section[$k]['section'][$i]['liveStatus']=$section[$k]['section'][$i]['starttime'];                            }                        }                    }                }                else{                    $courseinfo['isZhang']=0;                    foreach($section as $k=> $value){                        $section[$k]['isStudy']=isStudyBySidApp($courseinfo['id'],$section[$k]['id'],2,$param['uid']);                        if(strtotime($section[$k]['starttime'])<time()                            and time()<strtotime("+".$section[$k]['duration']."minutes",strtotime($section[$k]['starttime']))){                            $section[$k]['liveStatus']="正在直播...";                        }                        if(time()>strtotime("+".$section[$k]['duration']."minutes",strtotime($section[$k]['starttime']))){                            $section[$k]['liveStatus']="直播已结束";                        }                        if(strtotime($section[$k]['starttime'])>time()){                            $section[$k]['liveStatus']=$section[$k]['starttime'];                        }                    }                }                return (json_encode(['info'=>$courseinfo,'secList'=>$section,'comment'=>$comment,                    'material'=>$material,'teacherInfo'=>$teacherInfo,'isBuy'=>$isBuy])) ;                break;        }    }    function sectionInfo(){        $param=$this->request->param();        if($param['type']==1){            $sectionInfo=model('videoSection')->where(['id'=>$param['sid']])->find();        }        if($param['type']==2){            $sectionInfo=model('liveSection')->where(['id'=>$param['sid']])->find();        }        if(!empty($sectionInfo['document'])){            $this->nowStudy($param['uid'],$sectionInfo['csid'],$param['sid']);            $sectionInfo['document']= preg_replace_callback('/<[img|IMG].*?src=[\'| \"](?![http|https])(.*?(?:[\.gif|\.jpg]))[\'|\"].*?[\/]?>/', function ($r) {                $str = 'http://'.$_SERVER['HTTP_HOST'].$r[1];                return str_replace($r[1], $str, $r[0]);            },$sectionInfo['document']);        }        return (json_encode($sectionInfo));    }    function tuijian(){        $webUrl=$this->request->param("webUrl");        $videoCourse=db('videoCourse')->field(['id','title','price','picture','type'])->orderRaw('rand()')->limit(1)->where(['status'=>1,'is_hot'=>1])->select();        foreach ($videoCourse as $k=> $value) {            $videoCourse[$k]['picture']=$webUrl.$videoCourse[$k]['picture'];            $videoCourse[$k]['stuNum']=getUserNum($videoCourse[$k]['id'],1);        }        $liveCourse=db('liveCourse')->field(['id','title','price','picture','type'])->orderRaw('rand()')->limit(1)->where(['status'=>1,'is_hot'=>1])->select();        foreach ($liveCourse as $k=> $value) {            $liveCourse[$k]['picture']=$webUrl.$liveCourse[$k]['picture'];            $liveCourse[$k]['stuNum']=getUserNum($liveCourse[$k]['id'],2);;        }        $allCourse=array_merge($videoCourse,$liveCourse);        return  json_encode($allCourse);    }    function liveCourse(){        $webUrl=$this->request->param("webUrl");        $liveCourse=model('liveCourse')->field(['id','title','price','picture','type'])->order('sort_order asc,addtime desc')->limit(5)->where(['status'=>1])->select();        foreach ($liveCourse as $k=> $value) {            $liveCourse[$k]['picture']=$webUrl.$liveCourse[$k]['picture'];            $liveCourse[$k]['stuNum']=getUserNum($liveCourse[$k]['id'],2);            $liveCourse[$k]['nearest']=model('liveSection')->order('starttime desc')->            limit(1)->where(['csid'=>$liveCourse[$k]['id'],'starttime'=>['egt', date('Y-m-d h:i:s', time())]])->value('starttime');        }        return  json_encode($liveCourse);    }    function videoCourse(){        $webUrl=$this->request->param("webUrl");        $videoCourse=model('videoCourse')->field(['id','title','price','picture','type'])->order('sort_order asc,addtime desc')->limit(8)->where(['status'=>1])->select();        foreach ($videoCourse as $k=> $value) {            $videoCourse[$k]['picture']=$webUrl.$videoCourse[$k]['picture'];            $videoCourse[$k]['stuNum']=getUserNum($videoCourse[$k]['id'],1);        }        return  json_encode($videoCourse);    }    function getPlayUrl(){        $param=$this->request->param();        $this->nowStudy($param['uid'],$param['cid'],$param['sid']);        $url = config('author_web') . "/educloud/alivideo/getPlayInfo";        $postdata = ['KeyID' => config('KeyID'), 'keySecret' => config('KeySecret'), 'VideoId'=>$param['vid']];        $restemp = json_to_array(post_curl($url, $postdata));        return json_encode($restemp['PlayInfoList']['PlayInfo']);    }    function checkBuied($uid,$cid,$type){        switch ($type)        {            case 1:                $tid = model('videoCourse')->where(['id'=>$cid])->value('teacher_id');                break;            case 2:                $tid = model('liveCourse')->where(['id'=>$cid])->value('teacher_id');                break;        }        if((db('userCourse')->where(['uid'=>$uid,'cid'=>$cid,'type'=>$type])->find()) or (getTeacherIdByUid($uid)==$tid) ){            return getTeacherIdByUid($uid);        }else{            return false;        }    }    function getCategory(){        $category=model('category')->order('sort_order asc')->select();        return (json_encode($category));    }    function getArticle(){        $param=$this->request->param();        if (($param['cid']>0)) {            $where['cid'] = $param['cid'];        }        $list = model('article')->order('id desc')->where($where)->select();        foreach ($list as $k=> $value) {            $list[$k]['image']=$param['webUrl'].$list[$k]['image'];        }        return (json_encode($list));    }    function contents(){        $param=$this->request->param();        $contents=model('article')->with('category')->where(['id'=>$param['id']])->find();        model('article')->where(['id'=>input('id')])->setInc('view');        $contents['content']= preg_replace_callback('/<[img|IMG].*?src=[\'| \"](?![http|https])(.*?(?:[\.gif|\.jpg]))[\'|\"].*?[\/]?>/',            function ($r) {            $str = 'http://'.$_SERVER['HTTP_HOST'].$r[1];            return str_replace($r[1], $str, $r[0]);        },$contents['content']);        $contents['authorFcae']=$param['webUrl'].defaultAvatar(getAvatar($contents['uid']));        $contents['authorName']=$contents['uid']==-1 ? '管理员' :getUserName($contents['uid']);        return (json_encode($contents));    }    function courseList(){        $param = $this->request->param();        $where = [];        $where['status'] = 1;        if (isset($param['priceOrder']) and $param['priceOrder']==1) {            $order='price desc';        }        if (isset($param['priceOrder']) and $param['priceOrder']==2) {            $order='price asc';        }        if (isset($param['categoryId']) and $param['categoryId']>0) {            $where['cid']=$param['categoryId'];        }        if (isset($param['type']) and $param['type']==1) {            $Course=model('videoCourse')->field(['id','title','price','picture','type','teacher_id'])->order($order)->where($where)->select();            foreach ($Course as $k=> $value) {                $Course[$k]['picture']=$param['webUrl'].$Course[$k]['picture'];                $Course[$k]['stuNum']=getUserNum($Course[$k]['id'],1);                $Course[$k]['teacher']=getTeacherName($Course[$k]['teacher_id']);            }        }else if(isset($param['type']) and $param['type']==2){            $Course=model('liveCourse')->field(['id','title','price','picture','type','teacher_id'])->order($order)->where($where)->select();            foreach ($Course as $k=> $value) {                $Course[$k]['picture']=$param['webUrl'].$Course[$k]['picture'];                $Course[$k]['stuNum']=getUserNum($Course[$k]['id'],2);                $Course[$k]['teacher']=getTeacherName($Course[$k]['teacher_id']);            }        }else{            $videoCourse=model('videoCourse')->field(['id','title','price','picture','type','teacher_id'])->order($order)->where($where)->select();            foreach ($videoCourse as $k=> $value) {                $videoCourse[$k]['picture']=$param['webUrl'].$videoCourse[$k]['picture'];                $videoCourse[$k]['stuNum']=getUserNum($videoCourse[$k]['id'],1);                $videoCourse[$k]['teacher']=getTeacherName($videoCourse[$k]['teacher_id']);            }            $liveCourse=model('liveCourse')->field(['id','title','price','picture','type','teacher_id'])->order($order)->where($where)->select();            foreach ($liveCourse as $k=> $value) {                $liveCourse[$k]['picture']=$param['webUrl'].$liveCourse[$k]['picture'];                $liveCourse[$k]['stuNum']=getUserNum($liveCourse[$k]['id'],2);                $liveCourse[$k]['teacher']=getTeacherName($liveCourse[$k]['teacher_id']);            }            $Course=array_merge($videoCourse,$liveCourse);        }        return (json_encode($Course));    }    function courseCategory(){        $Category=model('courseCategory')->order('sort_order asc')->select();        return (json_encode($this->createTree($Category)));    }    function createTree($arr = array(), $pid = 0, $idName = 'id', $pidName = 'pid', $childName = 'child')    {        $tree = array();        $deep=-1;        foreach($arr as $k => $v)        {            if($v[$pidName] == $pid)            {                $tmp = $arr[$k];                unset($arr[$k]);                $tmp[$childName] =$this-> createTree($arr,$v[$idName],$idName,$pidName,$childName);                $tree[] = $tmp;                $deep++;            }        }        // $tree['deep']=$deep;        return  $tree;    }    public function register(){        $param = $this->request->param();        if(model('user')->where(['username' => $param['username']])->find()){            $res['code']=0;            $res['msg']='用户名已被注册';            return (json_encode($res));            exit();        }        if(model('user')->where(['mobile' => $param['mobile']])->find()){            $res['code']=0;            $res['msg']='手机号已被注册';            return (json_encode($res));            exit();        }        if($this->insert('user',$param,$rule = false) === true){            $user= model('user')->where(['username' => $param['username']])->find();            $res['code']=1;            $res['user']=$user;            $res['msg']='注册成功';            return (json_encode($res));        }else{            $res['code']=0;            $res['msg']=$this->errorMsg;            return (json_encode($res));        }    }    function regCode(){        $param = $this->request->param();        $code = rand_number(5);        session('telphoneCode',$code);        session('telphone',$param['mobile']);        $templateParam = array("code"=>$code);        $templateCode=unserialize(config('SmsTemplates_MC'));        $config['KeyID']=config('KeyID');        $config['KeySecret']=config('KeySecret');        $config['SmsSign']=config('SmsSign');        sendSMS($param['mobile'],$templateParam,$templateCode['TemplatesId'],$config);        $res['code']=0;        $res['msg']='发送成功';        $res['telphone']=$param['mobile'];        $res['regCode']=$code;        return (json_encode($res));    }    public function login()    {        $param = $this->request->param();        if(check_mobile($param['username'])){            $where['mobile']=$param['username'];            $where['password']=md5($param['password']);        }else{            $where['username']=$param['username'];            $where['password']=md5($param['password']);        }        $user = model('user')->where($where)->find();        if ($user) {            if($user['status'] != 1){                return json(array('code'=>0,  'msg'=>'账号已禁用', 'data'=>$user));            }else{                model('user')->save(['last_login_time' => time(), 'last_login_ip'=> $this->request->ip(), 'login_count' => $user['login_count'] + 1], ['id' => $user['id']]);                return json(array('code'=>1,  'msg'=>'登录成功', 'data'=>$user));            }        } else {            return json(array('code'=>0,  'msg'=>'账号或密码错误'));        }    }    public function wxlogin(){        $param = $this->request->param();        $user = model('user')->where(['openid' => $param['openid']])->find();        if(!$user){            $data['openid']=$param['openid'];            $data['username']=$param['nickname'];            $data['sex']=$param['sex'];            $data['avatar']=$param['avatarUrl'];            $data['create_time']=time();            $data['login_count']=1;            $data['status']=1;            $id=db('user')->insertGetId($data);            $user = model('user')->where(['id' => $id])->find();        }        $user['openid']=$param['openid'];        if($user['status'] != 1){            return json(array('code'=>0,  'msg'=>'账号已禁用', 'data'=>$user));        }else{            model('user')->save(['last_login_time' => time(), 'last_login_ip'=> $this->request->ip(), 'login_count' => $user['login_count'] + 1], ['id' => $user['id']]);            return json(array('code'=>1,  'msg'=>'登录成功', 'data'=>$user));        }    }    function wxaes(){        $param = $this->request->param();        if(empty($param['session_key']) || empty($param['encryptedData']) || empty($param['iv'])){exit(json('error', 'data error'));}        $errCode = $this->decryptData($param['encryptedData'], $param['iv'],$param['session_key']);        $user = model('user')->where(['openid' => $errCode['msg']['unionId']])->find();        if(!$user){            $data['openid']=$errCode['msg']['unionId'];            $data['username']=$errCode['msg']['nickName'];            $data['sex']=$errCode['msg']['gender'];            $data['avatar']=$errCode['msg']['avatarUrl'];            $data['create_time']=time();            $data['login_count']=1;            $data['status']=1;            $id=db('user')->insertGetId($data);            $user = model('user')->where(['id' => $id])->find();        }        $user['openid']=$errCode['msg']['openId'];        if($user['status'] != 1){            return json(array('code'=>0,  'msg'=>'账号已禁用', 'data'=>$user));        }else{            model('user')->save(['last_login_time' => time(), 'last_login_ip'=> $this->request->ip(), 'login_count' => $user['login_count'] + 1], ['id' => $user['id']]);            return json(array('code'=>1,  'msg'=>'登录成功', 'data'=>$user));        }    }    /**     * 检验数据的真实性，并且获取解密后的明文.     * @param $encryptedData string 加密的用户数据     * @param $iv string 与用户数据一同返回的初始向量     * @param $data string 解密后的原文     *     * @return int 成功0，失败返回对应的错误码     */    public function decryptData( $encryptedData, $iv,$session_key )    {        if (strlen($session_key) != 24) {            return json(['code'=>1,'msg'=>'-41001']);        }        $aesKey=base64_decode($session_key);        if (strlen($iv) != 24) {            return json(['code'=>1,'msg'=>'-41002']);        }        $aesIV     = base64_decode($iv);        $aesCipher = base64_decode($encryptedData);        $result = openssl_decrypt( $aesCipher, "AES-128-CBC", $aesKey, 1, $aesIV);        $dataObj=json_decode($result ,true);        if($dataObj  == NULL )        {            return ['code'=>1,'msg'=>'-41003'];        }        return ['code'=>0,'msg'=>$dataObj];    }    public function codeToSession(){        $param = $this->request->param();        if(empty($param['code'])){exit(json('error', 'code error'));}        $weixin_login = model('system')->where('name', 'Weixin_Login')->find();        $config= unserialize($weixin_login['value']);        $url =  "https://api.weixin.qq.com/sns/jscode2session?appid=".'wxa0c8bda1d94764f2'.            "&secret=".'7c9ef5e7b768e5a31576bbe7cf1a81b8'."&js_code=".$param['code']."&grant_type=authorization_code";        $res=get_curl($url);        return ($res);    }    public function logout(){        return json(array(            'code'=>1,            'msg'=>'退出成功'        ));    }    function getUserInfo(){        $param=$this->request->param();        $userInfo = model('user')->where(['username' => $param['username']])->find();        $avatar=defaultAvatar(getAvatar($userInfo['id']));        if(strstr($avatar, 'http://') || strstr($avatar, 'https://')) {            $userInfo['avatar']=defaultAvatar(getAvatar($userInfo['id']));        }else{            $userInfo['avatar']=$param['apiurl'].defaultAvatar(getAvatar($userInfo['id']));        }        $userInfo['courseCount']=model('userCourse')->where(['uid'=>$userInfo['id']])->count();        $userInfo['orderCount']=model('order')->where(['uid'=>$userInfo['id']])->count();        return (json_encode($userInfo));    }    function myCourse(){        $param=$this->request->param();        $myCourse=model('userCourse')->order('addtime desc')->where(['uid'=>$param['uid']])->select();        foreach ($myCourse as $key => $value) {            $myCourse[$key]['courseInfo']=$this->getCouseInfo($myCourse[$key]['cid'],$myCourse[$key]['type']);            $myCourse[$key]['courseInfo']['picture']=$param['webUrl'].$myCourse[$key]['courseInfo']['picture'];            $myCourse[$key]['courseInfo']['teacher']=getTeacherName($myCourse[$key]['courseInfo']['teacher_id']);            $myCourse[$key]['progress']=round(100*$this->getStuduedNum($myCourse[$key]['cid'],$myCourse[$key]['type'],$param['uid'])/getCourseNum($myCourse[$key]['cid'],$myCourse[$key]['type']));            $myCourse[$key]['lastStudy']=$this->getLastStudy($myCourse[$key]['cid'],$myCourse[$key]['type'],$param['uid']);        }        return (json_encode($myCourse));    }    function myNCourse(){        $param=$this->request->param();        $myCourse=model('userCourse')->order('nowstutime desc')->where(['uid'=>$param['uid']])->where('nowstutime','gt', '0000-00-00 00:00:00')->paginate(10);        foreach ($myCourse as $key => $value) {            $myCourse[$key]['courseInfo']=$this->getCouseInfo($myCourse[$key]['cid'],$myCourse[$key]['type']);            $myCourse[$key]['courseInfo']['picture']=$param['webUrl'].$myCourse[$key]['courseInfo']['picture'];            $myCourse[$key]['courseInfo']['teacher']=getTeacherName($myCourse[$key]['courseInfo']['teacher_id']);            $myCourse[$key]['lastStudy']=$this->getLastStudy($myCourse[$key]['cid'],$myCourse[$key]['type'],$param['uid']);        }        return (json_encode($myCourse));    }    function getStuduedNum($cid,$type,$uid){        $studiedId=model('userCourse')->where(['cid'=>$cid,'type'=>$type,'uid'=>$uid])->value('studied');        return json_count($studiedId);    }    function getLastStudy($cid,$type,$uid){        $lastStudyId=model('userCourse')->where(['cid'=>$cid,'type'=>$type,'uid'=>$uid])->value('nowstudy');        if($type==1){            $lastStudyTitle=model('videoSection')->where(['id'=>$lastStudyId])->value('title');        }        if($type==2){            $lastStudyTitle=model('liveSection')->where(['id'=>$lastStudyId])->value('title');        }        return (['id'=>$lastStudyId,'title'=>$lastStudyTitle]);    }    function confirmOrder(){        $param = $this->request->param();        switch ($param['type'])        {            case 1:                $courseinfo = model('videoCourse')->where(['id'=>$param['id']])->find();                break;            case 2:                $courseinfo = model('liveCourse')->where(['id'=>$param['id']])->find();                break;        }        $info['title']=$courseinfo['title'];        $info['id']=$courseinfo['id'];        $info['tid']=$courseinfo['type'];        $info['picture']=$param['webUrl'].$courseinfo['picture'];        $info['total']=$courseinfo['price'];        if($this->checkBuied($param['uid'],$param['id'],$param['type'])){            $res['code']=1;            $res['msg']='请不要重复购买课程';            return (json_encode($res));        }else{            return (json_encode($info));        }    }    function creatOrder(){        $param = $this->request->param();        switch ($param['type'])        {            case 1:                $courseinfo = model('videoCourse')->where(['id'=>$param['id']])->find();                break;            case 2:                $courseinfo = model('liveCourse')->where(['id'=>$param['id']])->find();                break;        }        if($param['payment']==1 || $param['payment']==3){            $order['paytype']='wxpay';        }        if($param['payment']==2){            $order['paytype']='alipay';        }        $order['title']=$courseinfo['title'];        $order['ctype']=$courseinfo['type'];        $order['total']=$courseinfo['price'];        $order['state']=0;        $order['addtime']=date('Y-m-d h:i:s', time());        $order['uid']=$param['uid'];        $order['tid']=$courseinfo['teacher_id'];        $order['cid']=$param['id'];        $order['orderid']= date('Ymdhms');        if(!$res=model('order')->where(['uid' => $param['uid'],'cid'=>$param['id'],'ctype'=>$param['type']])->find()){            db('order')->insert($order);        }else{            db('order')->where(['id'=>$res['id']])->update(['orderid'=>$order['orderid']]);        }        if($param['payment']==1){            $payInfo= $this->wxpay($order);            $payInfo['orderid']=$order['orderid'];            return (json_encode($payInfo));        }        if($param['payment']==2){            $payInfo= $this->alipay($order);            return (json_encode($payInfo));        }        if($param['payment']==3){            $order['openid']=$param['openid'];            $payInfo= $this->wxpayh5($order);            $payInfo['orderid']=$order['orderid'];            return (json_encode($payInfo));        }        if($param['payment']==4){            $payInfo= $this->mobileh5($order);            return (json_encode($payInfo));        }        if($param['payment']==5){            $payInfo= $this->alipayH5($order);            return (json_encode($payInfo));        }        if($param['payment']==6){            $orderInfo = model('order')->where(['orderid'=>$order['orderid']])->find();            $userInfo = model('user')->where(['id' => $order['uid']])->find();            if($userInfo['yue']<$orderInfo['total']){                return json_encode(['status'=>0,'msg'=>'账户余额不足，请及时充值']);            }else{                $this->update('order', ['profit'=>$orderInfo['total']*config('bili'),'state'=>1,'orderid'=>$orderInfo['orderid']], $rule = true, $field = true, $key = 'orderid');                if($profit=db('profit')->where(['tid'=>$orderInfo['tid']])->find()){                    db('profit')->where(['tid'=>$orderInfo['tid']])->update(['profit'=>$orderInfo['total']*config('bili')+$profit['profit']]);                }else{                    db('profit')->insert(['tid'=>$orderInfo['tid'],'profit'=>$orderInfo['total']*config('bili')]);                } ;                if(db('userCourse')->insert(['uid'=>$orderInfo['uid'],'cid'=>$orderInfo['cid'],'type'=>$orderInfo['ctype'],'state'=>1,'addtime'=>date('Y-m-d h:i:s', time())])){                    db('user')->where(['id'=>$orderInfo['uid']])->update(['yue'=>$userInfo['yue']-$orderInfo['total']]);                    return json_encode(['status'=>1,'msg'=>'购买成功']);                }else{                    return json_encode(['status'=>0,'msg'=>'购买失败']);                }            }        }    }    /** * 支付宝支付 */    public function alipay($order){        $payData = [            'order_no' =>$order['orderid'],            'order_price' => $order['total'],            'subject' => $order['title'],            'notify_url' =>'https://'.get_domain(). '/index/course/notifyalipay/',            'return_url'=>'https://'.get_domain(). '/index/course/return_url/',        ];        $alipay = new Alipay($this->alipayConfig());        return $info = $alipay->placeApp($payData);    }    /**     * 支付宝H5支付     */    public function alipayH5($order){        $payData = [            'order_no' =>$order['orderid'],            'order_price' => $order['total'],            'subject' => $order['title'],            'notify_url' =>'https://'.get_domain(). '/index/course/notifyalipay/',            'return_url'=>'https://'.get_domain(). '/index/course/return_url/',        ];        $alipay = new Alipay($this->alipayConfig());        return $info = $alipay->placeWap($payData);    }    /**     * 微信支付     */    public function wxpay($order){        $payData = [            'body' => $order['title'],            'out_trade_no' =>$order['orderid'],            'total_fee' => $order['total']*100,            'trade_type' => 'APP',            'notify_url' =>get_domain(). '/index/course/notifywechat/',            'expire'=>'600'        ];        $wechatPay = new WechatPay($this->wechatConfig());        $info = $wechatPay->unifiedOrder($payData);        return $wechatPay->getAppParam($info['prepay_id']);    }    public function wxpayh5($order){        $payData = [            'body' => $order['title'],            'out_trade_no' =>$order['orderid'],            'total_fee' => $order['total']*100,            'trade_type' => 'JSAPI',            'notify_url' =>get_domain(). '/index/course/notifywechat/',            'expire'=>'600',            'openid'=>$order['openid']        ];        $wechatPay = new WechatPay($this->wechatConfig());        $info = $wechatPay->unifiedOrder($payData);        return $wechatPay->getJsapiParam($info['prepay_id']);    }    function mobileh5($order){        $name="微信支付";        $payData = [            'body' => $order['title'],            'out_trade_no' =>$order['orderid'],            'total_fee' => $order['total']*100,            'trade_type' => 'MWEB',            'notify_url' =>get_domain(). '/index/course/notifywechat/',            'wap_url' => "https://demo.newlogo.cn",            'wap_name' => $name,            'scene_info'=>'{"h5_info": {"type":"Wap","wap_url": "https://demo.newlogo.cn","wap_name": "'.$name.'"}}'        ];        $wechatPay = new WechatPay($this->wechatConfig());        $info = $wechatPay->unifiedOrder($payData);        $info['mweb_url']=urlencode($info['mweb_url']);        return $info;    }    /**     * 微信回调处理     */    public function notifywechat()    {        $param = $this->request->param();        $orderInfo = model('order')->where(['orderid'=>$param['orderid']])->find();        $this->update('order', ['profit'=>$orderInfo['total']*config('bili'),'state'=>1,'orderid'=>$param['orderid']], $rule = true, $field = true, $key = 'orderid');        if($profit=db('profit')->where(['tid'=>$orderInfo['tid']])->find()){            db('profit')->where(['tid'=>$orderInfo['tid']])->update(['profit'=>$orderInfo['total']*config('bili')+$profit['profit']]);        }else{            db('profit')->insert(['tid'=>$orderInfo['tid'],'profit'=>$orderInfo['total']*config('bili')]);        }        if($this->insert('userCourse',['uid'=>$orderInfo['uid'],'cid'=>$orderInfo['cid'],'type'=>$orderInfo['ctype'],'state'=>1,'addtime'=>date('Y-m-d h:i:s', time())])){            return json_encode(['status'=>1,'msg'=>'购买成功']);        }else{            return json_encode(['status'=>0,'msg'=>'购买失败']);        }    }    public function buyFree(){        $param=$this->request->param();        if($this->insert('userCourse',['uid'=>$param['uid'],'cid'=>$param['cid'],'type'=>$param['tid'],'state'=>1,'addtime'=>date('Y-m-d h:i:s', time())],$rule = false)===true){            return json_encode(['status'=>1,'msg'=>'添加成功']);        }else{            return json_encode(['status'=>0,'msg'=>$this->errorMsg]);        }    }    public	function upavatar(){        $param=$this->request->param();        if(!empty($_FILES['file'])){            $exename  = $this->getExeName($_FILES['file']['name']);            if(!in_array($exename, array('png', 'gif', 'jpeg', 'jpg'))){                return json_encode(['code'=>1,'msg'=>'仅支持png,gif,jpeg,jpg格式的图片']);                exit();            }            $file=uniqid().'.'.$exename;            $imageSavePath= ROOT_PATH . 'public' . DS . 'upload' . DS . 'image' . DS . $file;            if(move_uploaded_file($_FILES['file']['tmp_name'], $imageSavePath)){                $param['avatar']='/upload/image/'.$file;                $this->update('user', $param, input('_verify', false));                return json_encode(['code'=>0,'msg'=>'上传成功','url'=>$imageSavePath]);                exit();            }else{                return json_encode(['code'=>1,'msg'=>$_FILES['file']['tmp_name']]);                exit();            }        }else{            return json_encode(['code'=>1,'msg'=>'接收文件失败']);            exit();        }    }    function getExeName($fileName){        $pathinfo      = pathinfo($fileName);        return strtolower($pathinfo['extension']);    }    function orderList(){        $param = $this->request->param();        $list=model('order')->order('id desc')->where(['uid'=>$param['uid']])->select();        foreach ($list as $key => $value) {            $list[$key]['courseInfo']=$this->getCouseInfo($list[$key]['cid'],$list[$key]['ctype']);            $list[$key]['courseInfo']['picture']=$param['webUrl'].$list[$key]['courseInfo']['picture'];            $list[$key]['courseInfo']['teacher']=getTeacherName($list[$key]['courseInfo']['teacher_id']);        }        return (json_encode($list));    }    function orderCancel(){        if ($this->delete('order', $this->request->param()) === true) {            $res['code']=0;            $res['msg']="删除成功";        } else {            $res['code']=1;            $res['msg']=$this->errorMsg;        }        return (json_encode($res));    }    /**     * 写入学习记录     */    public function studied(){        $param = $this->request->param();        $study=model('userCourse')->where(['uid'=>$param['uid'],'cid'=>$param['cid']])->value('studied');        if(empty($study)){            $studyArry=array($param['sid']);            $studyJson=json_encode($studyArry);        }else{            $studyArry = json_decode($study,true);            if(!in_array($param['sid'],$studyArry)){                array_push($studyArry,$param['sid']);            }            $studyJson=json_encode($studyArry);        }        if(model('userCourse')->where(['uid'=>$param['uid'],'cid'=>$param['cid']])->update(['studied'=>$studyJson,'nowstutime'=>date('Y-m-d H:i:s',time())])){            echo json_encode(['status'=>1]);        }else{            echo json_encode(['status'=>0]);        }    }    /**     * 写入正在学习章节     */    public function nowStudy($uid,$cid,$sid){        model('userCourse')->where(['uid'=>$uid,'cid'=>$cid])->update(['nowstudy'=>$sid]);    }    /**     * 课程评论     */    public function addComment(){        $param = $this->request->param();        $param['addtime']=date("Y-m-d H:i:s",time());        if ($id=model('comment')->insertGetId($param)){            return json_encode(['code'=>'1']);        }else{            return json_encode(['code'=>'0','msg'=>$this->error($this->errorMsg)]);        }    }    /**     * 关于我们     */    public function about(){        $param = $this->request->param();        $about['logo']=$param['webUrl'].config('website.logo');        $about['about']=config('website.about');        $about['address']=config('contact.address');        $about['tel']=config('contact.tel');        $about['email']=config('contact.email');        return json_encode($about) ;    }    public function infoSetting(){        $param = $this->request->param();        if ($this->update('user', $param, input('_verify', false)) === true) {            return json_encode(['code'=>1,'msg'=>'修改成功']) ;        } else {            return json_encode(['code'=>0,'msg'=>$this->errorMsg]) ;        }    }    public function getPushLiveUrl(){        $param = $this->request->param();        $room_id=model('liveSection')->where('id',$param['sid'])->value('room_id');        $config=$this->get_site_info();        $url = $config['server'] . "/educloud/educloud/getPushLiveUrl";        $postdata = array_merge($config,['room_id'=>$room_id]);        echo post_curl($url, $postdata);    }    public function getLivePlayUrl(){        $param = $this->request->param();        $sectionInfo=model('liveSection')->where('id',$param['sid'])->find();        $room_id=$sectionInfo['room_id'];        $config=$this->get_site_info();        if(strtotime($sectionInfo['starttime'])<time() and time()<strtotime("+".$sectionInfo['duration']."minutes",strtotime($sectionInfo['starttime']))){            $url = $config['server'] . "/educloud/educloud/getLiveUrl";            $userInfo=model('user')->where(['id'=>$param['uid']])->find();            $userInfo['avatar']=is_https().$config['domain'].$userInfo['avatar'];            $cid=model('liveSection')->where('room_id',$room_id)->value('csid');            $tid=model('liveCourse')->where('id',$cid)->value('teacher_id');            $userRole=($tid==getTeacherIdByUid(is_user_login()))? 1:0;            $postdata = array_merge($config,['room_id'=>$room_id,'user_number'=>$userInfo['id'],'user_name'=>$userInfo['username'],'user_role'=>$userRole,'user_avatar'=>$userInfo['avatar']]);            echo post_curl($url, $postdata);        }        if(time()>strtotime("+".$sectionInfo['duration']."minutes",strtotime($sectionInfo['starttime']))){            $url = $config['server'] . "/educloud/educloud/getLivePlayBacToken";            $postdata = array_merge($config,['room_id'=>$room_id]);            $res= json_decode(post_curl($url, $postdata), true);            $data['url']=$res['playBacurl'];            $data['code']=$res['code'];            $data['msg']=$res['msg'];            return json_encode($data) ;        }    }    public function checkValid (){        $param = $this->request->param();        if($param['tid']==1){            $sectionInfo=model('videoSection')->field('csid,isfree')->where(['id'=>$param['sid']])->find();            $courseInfo=model('videoCourse')->field('id,youxiaoqi,teacher_id')->where(['id'=>$sectionInfo['csid']])->find();        }        if($param['tid']==2){            $sectionInfo=model('liveSection')->field('csid,isfree')->where(['id'=>$param['sid']])->find();            $courseInfo=model('liveCourse')->field('id,youxiaoqi,teacher_id')->where(['id'=>$sectionInfo['csid']])->find();        }        $addCourseTime=model('userCourse')->where(['cid'=>$courseInfo['id'],'type'=>$param['tid'],'uid'=>$param['uid']])->value('addtime');        $remain=strtotime("+".$courseInfo['youxiaoqi']."days",strtotime($addCourseTime));        if($courseInfo['youxiaoqi']==0 || $remain> time() || $sectionInfo['isfree']==1 ){            $data['status']= 1;        }elseif($remain<=time()){            $data['status']= 0;        }        return json_encode($data) ;    }    function userInfo(){        $param=$this->request->param();        $userInfo = model('user')->where(['id' => $param['uid']])->find();        return json_encode($userInfo) ;    }}